name: 🧪 Enhanced Test Suite with Analytics

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_categories:
        description: 'Test categories to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - smoke
          - integration
          - performance
          - security
      parallel_jobs:
        description: 'Number of parallel jobs'
        required: false
        default: '4'
        type: string

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'
  DFX_VERSION: '0.15.0'

jobs:
  # Job 1: Test Environment Setup and Validation
  setup:
    name: 🔧 Setup & Validation
    runs-on: ubuntu-latest
    outputs:
      test-matrix: ${{ steps.test-matrix.outputs.matrix }}
      cache-key: ${{ steps.cache-key.outputs.key }}
      should-run-tests: ${{ steps.changes.outputs.should_run }}
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: 🔍 Detect Changes
        id: changes
        run: |
          # Always run on main branch, PRs, or manual dispatch
          if [[ "${{ github.event_name }}" == "workflow_dispatch" || "${{ github.ref }}" == "refs/heads/main" || "${{ github.event_name }}" == "pull_request" ]]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
          else
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi

      - name: 🎯 Generate Test Matrix
        id: test-matrix
        run: |
          if [[ "${{ github.event.inputs.test_categories }}" == "all" || -z "${{ github.event.inputs.test_categories }}" ]]; then
            CATEGORIES='["smoke", "integration", "performance", "security"]'
          else
            CATEGORIES='["${{ github.event.inputs.test_categories }}"]'
          fi

          BROWSERS='["chromium", "firefox", "webkit"]'

          echo "matrix={\"category\": $CATEGORIES, \"browser\": $BROWSERS}" >> $GITHUB_OUTPUT
          echo "Generated test matrix: $CATEGORIES x $BROWSERS"

      - name: 🔑 Generate Cache Key
        id: cache-key
        run: |
          HASH=$(echo "${{ runner.os }}-${{ env.NODE_VERSION }}-${{ hashFiles('package.json', 'pnpm-lock.yaml') }}" | sha256sum | cut -d' ' -f1)
          echo "key=deps-$HASH" >> $GITHUB_OUTPUT

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🔄 Cache Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.pnpm-store
            node_modules
            ~/.cache/ms-playwright
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            deps-${{ runner.os }}-${{ env.NODE_VERSION }}-

      - name: 📥 Install Dependencies
        run: |
          pnpm install --frozen-lockfile
          pnpm exec playwright install --with-deps

      - name: 🔧 Setup DFX
        if: steps.changes.outputs.tests == 'true'
        run: |
          sh -ci "$(curl -fsSL https://sdk.dfinity.org/install.sh)" -- --version ${{ env.DFX_VERSION }}
          echo "$HOME/bin" >> $GITHUB_PATH

      - name: 🏥 Health Check
        run: |
          node --version
          pnpm --version
          pnpm test:categories

  # Job 2: Parallel Test Execution Matrix
  test-matrix:
    name: 🧪 ${{ matrix.category }} / ${{ matrix.browser }}
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.should-run-tests == 'true'
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.setup.outputs.test-matrix) }}

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js & pnpm
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🔄 Restore Dependencies Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.pnpm-store
            node_modules
            ~/.cache/ms-playwright
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            deps-${{ runner.os }}-${{ env.NODE_VERSION }}-

      - name: 📥 Install Dependencies
        run: |
          pnpm install --frozen-lockfile
          pnpm exec playwright install ${{ matrix.browser }}

      - name: 🔧 Setup DFX & Canisters
        run: |
          sh -ci "$(curl -fsSL https://sdk.dfinity.org/install.sh)" -- --version ${{ env.DFX_VERSION }}
          echo "$HOME/bin" >> $GITHUB_PATH

          # Start local IC network for integration tests
          if [[ "${{ matrix.category }}" == "integration" ]]; then
            dfx start --background --clean
            dfx deploy --yes
          fi

      - name: 🚀 Start Development Server
        run: |
          pnpm dev &
          # Wait for server to be ready
          timeout 60s bash -c 'until curl -f http://localhost:3001/api/health; do sleep 2; done'
        env:
          NODE_ENV: test
          CI: true

      - name: 🧪 Run ${{ matrix.category }} Tests
        run: |
          case "${{ matrix.category }}" in
            smoke)
              pnpm test:smoke --project=${{ matrix.browser }} --reporter=json,html,junit
              ;;
            integration)
              pnpm test:integration --project=${{ matrix.browser }} --reporter=json,html,junit
              ;;
            performance)
              pnpm test:performance --project=${{ matrix.browser }} --reporter=json,html,junit
              ;;
            security)
              pnpm test:security --project=${{ matrix.browser }} --reporter=json,html,junit
              ;;
            *)
              echo "Unknown test category: ${{ matrix.category }}"
              exit 1
              ;;
          esac
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:3001
          TEST_BROWSER: ${{ matrix.browser }}
          TEST_CATEGORY: ${{ matrix.category }}

      - name: 📊 Generate Test Report
        if: always()
        run: |
          # Create comprehensive test report
          mkdir -p test-reports/${{ matrix.category }}-${{ matrix.browser }}

          # Copy Playwright reports
          if [ -d "playwright-report" ]; then
            cp -r playwright-report/* test-reports/${{ matrix.category }}-${{ matrix.browser }}/
          fi

          # Copy test results
          if [ -d "test-results" ]; then
            cp -r test-results/* test-reports/${{ matrix.category }}-${{ matrix.browser }}/
          fi

          # Generate summary
          cat > test-reports/${{ matrix.category }}-${{ matrix.browser }}/summary.json << EOF
          {
            "category": "${{ matrix.category }}",
            "browser": "${{ matrix.browser }}",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "commit": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "run_id": "${{ github.run_id }}",
            "actor": "${{ github.actor }}"
          }
          EOF

      - name: 🔄 Upload Test Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports-${{ matrix.category }}-${{ matrix.browser }}
          path: |
            test-reports/
            playwright-report/
            test-results/
          retention-days: 30

      - name: 📈 Upload Test Results to Analytics
        if: always()
        uses: ./.github/actions/test-analytics
        with:
          category: ${{ matrix.category }}
          browser: ${{ matrix.browser }}
          results-path: test-results/results.json

  # Job 3: Canister Tests (Parallel)
  canister-tests:
    name: 🏗️ Canister Tests
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.should-run-tests == 'true'
    strategy:
      fail-fast: false
      matrix:
        category: [smoke, integration, performance, security]

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup DFX
        run: |
          sh -ci "$(curl -fsSL https://sdk.dfinity.org/install.sh)" -- --version ${{ env.DFX_VERSION }}
          echo "$HOME/bin" >> $GITHUB_PATH

      - name: 🏗️ Build & Test Canisters
        run: |
          dfx start --background --clean
          dfx build
          dfx deploy --yes

          # Run category-specific canister tests
          ./scripts/enhanced-canister-tests.sh ${{ matrix.category }}

      - name: 📊 Collect Canister Metrics
        if: always()
        run: |
          mkdir -p canister-reports/${{ matrix.category }}

          # Collect canister status and metrics
          dfx canister status --all > canister-reports/${{ matrix.category }}/status.txt 2>&1 || true

          # Test specific canister endpoints
          dfx canister call micro_grants getCanisterMetrics > canister-reports/${{ matrix.category }}/metrics.txt 2>&1 || true

          # Generate canister test summary
          cat > canister-reports/${{ matrix.category }}/summary.json << EOF
          {
            "category": "${{ matrix.category }}",
            "type": "canister",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "commit": "${{ github.sha }}",
            "network": "local"
          }
          EOF

      - name: 🔄 Upload Canister Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: canister-reports-${{ matrix.category }}
          path: canister-reports/
          retention-days: 30

  # Job 4: Test Results Analysis & Reporting
  analyze-results:
    name: 📊 Analyze & Report Results
    runs-on: ubuntu-latest
    needs: [test-matrix, canister-tests]
    if: always()

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js & pnpm
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📥 Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: 📥 Download All Test Artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-test-results/

      - name: 📊 Generate Comprehensive Report
        run: |
          node scripts/generate-test-report.js all-test-results/ > test-summary.md

          # Generate analytics data
          node scripts/test-analytics.js all-test-results/ > test-analytics.json

      - name: 📈 Update Test Dashboard
        run: |
          # Update test dashboard with results
          node scripts/update-dashboard.js test-analytics.json

      - name: 💬 Comment Test Results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const testSummary = fs.readFileSync('test-summary.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: testSummary
            });

      - name: 📊 Publish Test Report
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./test-dashboard
          destination_dir: test-reports

      - name: 🔔 Notify on Failure
        if: failure()
        run: |
          echo "Test failure notification - Results available in test-analytics.json"
          echo "GitHub Run: ${{ github.run_id }}"
          echo "Commit: ${{ github.sha }}"

  # Job 5: Performance Monitoring
  performance-monitoring:
    name: 📈 Performance Monitoring
    runs-on: ubuntu-latest
    needs: test-matrix
    if: contains(needs.test-matrix.result, 'success')

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 📥 Download Performance Results
        uses: actions/download-artifact@v4
        with:
          name: test-reports-performance-chromium
          path: performance-results/

      - name: 📊 Analyze Performance Trends
        run: |
          node scripts/performance-analysis.js performance-results/ > performance-report.md

      - name: 📈 Update Performance Dashboard
        run: |
          node scripts/update-performance-dashboard.js performance-results/

      - name: ⚠️ Performance Regression Check
        run: |
          node scripts/check-performance-regression.js performance-results/

  # Job 6: Security Scan Results
  security-analysis:
    name: 🔒 Security Analysis
    runs-on: ubuntu-latest
    needs: test-matrix
    if: contains(needs.test-matrix.result, 'success')

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 📥 Download Security Test Results
        uses: actions/download-artifact@v4
        with:
          name: test-reports-security-chromium
          path: security-results/

      - name: 🔍 Analyze Security Results
        run: |
          node scripts/security-analysis.js security-results/ > security-report.md

      - name: 🔒 Generate Security Score
        run: |
          node scripts/calculate-security-score.js security-results/ > security-score.json

      - name: 📊 Update Security Dashboard
        run: |
          node scripts/update-security-dashboard.js security-results/
