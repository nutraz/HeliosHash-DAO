name: Smart Contract Security Audit
on:
  push:
    branches: [ main ]
    paths: 
      - 'canisters/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'canisters/**'

jobs:
  motoko-security-audit:
    runs-on: ubuntu-latest
    name: Motoko Security Analysis
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup DFX
        uses: dfinity/setup-dfx@main
        with:
          dfx-version: latest

      - name: Install Motoko compiler
        run: |
          dfx cache install

      - name: Static analysis of Motoko code
        run: |
          echo "üîç Running static analysis on Motoko canisters..."
          
          # Check for common security patterns
          echo "Checking for potential security issues..."
          
          # Check for unsafe patterns
          find canisters -name "*.mo" -exec grep -l "assert\|trap\|Debug.trap" {} \; | while read file; do
            echo "‚ö†Ô∏è Found assert/trap in $file - review for DoS vulnerabilities"
          done
          
          # Check for caller validation
          find canisters -name "*.mo" -exec grep -L "msg.caller\|Principal.isAnonymous" {} \; | while read file; do
            if grep -q "shared" "$file"; then
              echo "‚ö†Ô∏è Shared function without caller validation in $file"
            fi
          done
          
          # Check for proper access controls
          find canisters -name "*.mo" -exec grep -l "shared.*msg" {} \; | while read file; do
            if ! grep -q "if.*msg.caller" "$file" && ! grep -q "assert.*msg.caller" "$file"; then
              echo "‚ÑπÔ∏è Consider access control validation in $file"
            fi
          done

      - name: Compile all canisters
        run: |
          echo "üî® Compiling canisters to check for compilation errors..."
          # This will catch syntax errors and type issues
          dfx build --check || echo "::error::Canister compilation failed"

      - name: Run canister tests
        run: |
          echo "üß™ Running canister test suite..."
          if [ -f "canisters/test-runner/run-tests.sh" ]; then
            chmod +x canisters/test-runner/run-tests.sh
            ./canisters/test-runner/run-tests.sh || echo "::warning::Some canister tests failed"
          else
            echo "No test runner found"
          fi

      - name: Analyze canister dependencies
        run: |
          echo "üìä Analyzing canister dependencies..."
          find canisters -name "*.mo" -exec grep -h "import" {} \; | sort | uniq -c | sort -nr

      - name: Security checklist validation
        run: |
          echo "‚úÖ Smart Contract Security Checklist:"
          echo "- [ ] All shared functions validate caller identity"
          echo "- [ ] No unbounded loops or recursion"
          echo "- [ ] Proper error handling without information leakage"
          echo "- [ ] Access controls implemented for administrative functions"
          echo "- [ ] Inter-canister calls handle failures gracefully"
          echo "- [ ] No hardcoded principals or sensitive data"
          echo "- [ ] Upgrade hooks preserve critical state"
          echo "- [ ] Timer functions have proper bounds"
          
          echo ""
          echo "üîç Manual review required for:"
          echo "- Business logic correctness"
          echo "- Economic attack vectors"
          echo "- Governance mechanism security"
          echo "- Inter-canister communication patterns"