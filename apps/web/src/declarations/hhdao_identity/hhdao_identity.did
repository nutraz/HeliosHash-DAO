type VerificationStatus = 
 variant {
   Approved;
   InReview;
   Pending;
   Rejected;
 };
type VerificationRequest = 
 record {
   documentHash: opt text;
   id: nat;
   notes: opt text;
   "principal": principal;
   processedAt: opt int;
   requestedAt: int;
   status: VerificationStatus;
   verificationType: VerificationLevel;
 };
type VerificationLevel = 
 variant {
   Basic;
   Email;
   Enhanced;
   KYC;
 };
type UserProfile = 
 record {
   aadhaarVerified: bool;
   avatar: opt text;
   bio: opt text;
   createdAt: int;
   displayName: opt text;
   email: opt text;
   isVerified: bool;
   location: opt text;
   owpBalance: nat;
   prefersDuoValidation: bool;
   "principal": principal;
   role: Role;
   secondaryRoles: vec Role;
   updatedAt: int;
   username: opt text;
   verificationLevel: VerificationLevel;
   website: opt text;
 };
type Role = 
 variant {
   Authority;
   Community;
   DAO;
   Investor;
   Partner;
 };
type Result_3 = 
 variant {
   err: text;
   ok: text;
 };
type Result_2 = 
 variant {
   err: text;
   ok: nat;
 };
type Result_1 = 
 variant {
   err: text;
   ok;
 };
type Result = 
 variant {
   err: text;
   ok: UserProfile;
 };
service : {
  addSecondaryRole: (role: Role) -> (Result);
  createProfile: (username: opt text, email: opt text, displayName: opt text,
   role: Role) -> (Result);
  createSession: () -> (Result_3);
  getAuthorities: () -> (vec principal) query;
  getDuoValidationPreference: (userPrincipal: principal) -> (bool) query;
  getIdentityStats: () ->
   (record {
      activeSessions: nat;
      pendingVerifications: nat;
      totalProfiles: nat;
      verifiedProfiles: nat;
    }) query;
  getMyVerificationRequests: () -> (vec VerificationRequest) query;
  getProfile: ("principal": principal) -> (opt UserProfile) query;
  getProfileByUsername: (username: text) -> (opt UserProfile) query;
  getUserRole: ("principal": principal) -> (opt Role) query;
  getUserRoles: ("principal": principal) ->
   (opt record {
          primary: Role;
          secondary: vec Role;
        }) query;
  getUsersWithDuoPreference: () -> (vec principal) query;
  getVerificationRequest: (requestId: nat) -> (opt VerificationRequest) query;
  hasRole: ("principal": principal, role: Role) -> (bool) query;
  logout: (sessionId: text) -> (Result_3);
  processVerificationRequest: (requestId: nat, status: VerificationStatus,
   notes: opt text) -> (Result_3);
  requestVerification: (verificationType: VerificationLevel, documentHash:
   opt text) -> (Result_2);
  setAadhaarVerified: () -> (Result);
  setDuoValidationPreference: (prefersDuo: bool) -> (Result);
  updateOWPBalance: (userPrincipal: principal, newBalance: nat) -> (Result_1);
  updateProfile: (username: opt text, email: opt text, displayName: opt text,
   bio: opt text, avatar: opt text, location: opt text, website: opt text) ->
   (Result);
  updateUserRole: (role: Role) -> (Result);
  validateSession: (sessionId: text) -> (Result);
}
