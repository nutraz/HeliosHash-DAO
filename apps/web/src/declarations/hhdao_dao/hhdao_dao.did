type Time = int;
<<<<<<< HEAD
=======
type Result_2 = 
 variant {
   err: text;
   ok: ProposalId;
 };
type Result_1 = 
 variant {
   err: text;
   ok: nat;
 };
type Result = 
 variant {
   err: text;
   ok;
 };
type ProposalStatus = 
 variant {
   Active;
   Expired;
   Passed;
   Rejected;
 };
>>>>>>> audit-clean
type ProposalId = nat;
type Proposal = 
 record {
   approved: bool;
   category: ContributionType;
   createdAt: Time;
   description: text;
   finalized: bool;
   id: ProposalId;
<<<<<<< HEAD
   proposer: MemberId;
   title: text;
   votesAgainst: nat;
   votesFor: nat;
=======
   location: opt record {
                   address: text;
                   latitude: float64;
                   longitude: float64;
                 };
   proposer: MemberId;
   status: ProposalStatus;
   title: text;
   votesAgainst: nat;
   votesFor: nat;
   votingDeadline: Time;
>>>>>>> audit-clean
 };
type MemberId = principal;
type Member = 
 record {
   contributionScore: nat;
<<<<<<< HEAD
   id: MemberId;
   joinedAt: Time;
=======
   gender: opt GenderIdentity;
   id: MemberId;
   isVerified: bool;
   joinedAt: Time;
   mentorshipStatus: opt record {
                           isMentor: bool;
                           specialization: text;
                         };
 };
type JurorApplication = 
 record {
   appliedAt: Time;
   approved: bool;
   experience: text;
   juror: principal;
   stake: nat;
 };
type GenderIdentity = 
 variant {
   Female;
   Male;
   NonBinary;
   PreferNotToSay;
 };
type DisputeStatus = 
 variant {
   Appealed;
   InArbitration;
   Pending;
   Resolved;
 };
type DisputeEvidence = 
 record {
   description: text;
   evidenceHash: text;
   submitter: principal;
   timestamp: Time;
 };
type Dispute = 
 record {
   appealDeadline: opt Time;
   challenger: principal;
   createdAt: Time;
   evidence: vec DisputeEvidence;
   id: nat;
   jurors: vec principal;
   proposalId: ProposalId;
   reason: text;
   resolvedAt: opt Time;
   ruling: opt record {
                 reasoning: text;
                 winner: principal;
               };
   status: DisputeStatus;
>>>>>>> audit-clean
 };
type ContributionType = 
 variant {
   CommunityCare;
   DisputeResolution;
   Mentorship;
   Other: text;
   PanelMaintenance;
   Teaching;
 };
service : {
<<<<<<< HEAD
=======
  appealDispute: (disputeId: nat, _reason: text) -> (Result);
  applyAsJuror: (experience: text, stake: nat) -> (Result);
  approveJuror: (jurorPrincipal: principal) -> (Result);
  assignJurors: (disputeId: nat, jurors: vec principal) -> (Result);
>>>>>>> audit-clean
  createProposal: (title: text, description: text, category:
   ContributionType) -> (ProposalId);
  finalizeProposal: (proposalId: ProposalId) -> ();
  getAllMembers: () -> (vec Member) query;
  getAllProposals: () -> (vec Proposal) query;
  getApprovalThreshold: () -> (nat) query;
<<<<<<< HEAD
=======
  getApprovedJurors: () -> (vec principal) query;
  getDispute: (disputeId: nat) -> (opt Dispute) query;
  getDisputes: () -> (vec Dispute) query;
  getGovernanceMeta: () ->
   (record {
      activeCount: nat;
      consensusBps: nat;
      nextId: nat;
      schemaVersion: nat;
      totalProposals: nat;
    }) query;
  getJurorApplications: () -> (vec JurorApplication) query;
>>>>>>> audit-clean
  getMember: (id: MemberId) -> (opt Member) query;
  getMemberCount: () -> (nat) query;
  getProposal: (id: ProposalId) -> (opt Proposal) query;
  getVoteCount: (proposalId: ProposalId) -> (opt record {
                                                   nat;
                                                   nat;
                                                 }) query;
<<<<<<< HEAD
  hasVotedQuery: (proposalId: ProposalId, memberId: MemberId) -> (bool) query;
  join: () -> ();
=======
  getWomenParticipationStats: () ->
   (record {
      mentorshipPrograms: nat;
      quotaMet: bool;
      totalMembers: nat;
      womenMembers: nat;
      womenPercentage: nat;
    }) query;
  hasVotedQuery: (proposalId: ProposalId, memberId: MemberId) -> (bool) query;
  join: () -> ();
  proposeQuotaUpdate: (newQuotaBps: nat) -> (Result_2);
  raiseDispute: (proposalId: ProposalId, reason: text) -> (Result_1);
  registerMentorship: (specialization: text, isMentor: bool) -> (Result);
  registerWithTreasury: (treasuryPrincipal: principal) -> (Result);
  resolveDispute: (disputeId: nat, winner: principal, reasoning: text) ->
   (Result);
  setConsensusBps: (newBps: nat) -> ();
  setTestMode: (flag: bool) -> ();
  setVotingWindowSeconds: (secs: nat) -> ();
  submitEvidence: (disputeId: nat, evidenceHash: text, description: text) ->
   (Result);
  updateGenderIdentity: (gender: GenderIdentity) -> (Result);
>>>>>>> audit-clean
  vote: (proposalId: ProposalId, approve: bool) -> ();
}
